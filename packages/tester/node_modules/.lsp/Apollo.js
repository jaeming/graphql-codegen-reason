// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var GraphQLTypes$Tester = require("tester/generated/GraphQLTypes.bs.js");
var ReasonReactApollo_Make = require("reason-react-apollo/src/ReasonReactApollo_Make.bs.js");

function parse(prim) {
  return prim;
}

var include = ReasonReactApollo_Make.MakeProject(/* module */[/* parse */parse]);

var MakeQuery = include[0];

function parse$1(v) {
  return null;
}

var Foo = Curry._1(MakeQuery, (({"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"myTestQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"POST_STATUS"}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"posts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}},{"kind":"Argument","name":{"kind":"Name","value":"status"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"PostData"},"directives":[]}]}}]}}]}), /* module */[/* parse */parse$1]));

function makeVariables(title, status, param) {
  return {
          title: title,
          status: Js_null_undefined.fromOption(Belt_Option.map(status, GraphQLTypes$Tester.postStatus_enumToJs))
        };
}

var query = ({"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"myTestQuery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"POST_STATUS"}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"posts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}},{"kind":"Argument","name":{"kind":"Name","value":"status"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"PostData"},"directives":[]}]}}]}}]});

var MyTestQuery = /* module */[
  /* makeVariables */makeVariables,
  /* query */query
];

function makeVariables$1(param) {
  return /* () */0;
}

var query$1 = ({"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"noVariables"},"variableDefinitions":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"authors"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"},"arguments":[],"directives":[]}]}}]}}]});

var NoVariables = /* module */[
  /* makeVariables */makeVariables$1,
  /* query */query$1
];

var Queries = /* module */[
  /* MyTestQuery */MyTestQuery,
  /* NoVariables */NoVariables
];

function makeVariables$2(data, param) {
  return {
          data: data
        };
}

var mutation = ({"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"createPost"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreatePostInput"}}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createFullPost"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"PostData"},"directives":[]}]}}]}}]});

var CreatePost = /* module */[
  /* makeVariables */makeVariables$2,
  /* mutation */mutation
];

var Mutations = /* module */[/* CreatePost */CreatePost];

var Graphql_Verify = GraphQLTypes$Tester.Graphql_Verify;

var Graphql_Missing_Field = GraphQLTypes$Tester.Graphql_Missing_Field;

var Graphql_Bad_Enum_Value = GraphQLTypes$Tester.Graphql_Bad_Enum_Value;

var verifyGraphQLType = GraphQLTypes$Tester.verifyGraphQLType;

var getField = GraphQLTypes$Tester.getField;

var getNullableField = GraphQLTypes$Tester.getNullableField;

var getArray = GraphQLTypes$Tester.getArray;

var getNullableArray = GraphQLTypes$Tester.getNullableArray;

var makeDecoder = GraphQLTypes$Tester.makeDecoder;

var makeNullableDecoder = GraphQLTypes$Tester.makeNullableDecoder;

var decodeInt = GraphQLTypes$Tester.decodeInt;

var getString = GraphQLTypes$Tester.getString;

var getNullableString = GraphQLTypes$Tester.getNullableString;

var getFloat = GraphQLTypes$Tester.getFloat;

var getNullableFloat = GraphQLTypes$Tester.getNullableFloat;

var getInt = GraphQLTypes$Tester.getInt;

var getNullableInt = GraphQLTypes$Tester.getNullableInt;

var getBool = GraphQLTypes$Tester.getBool;

var getNullableBool = GraphQLTypes$Tester.getNullableBool;

var decodeEnum = GraphQLTypes$Tester.decodeEnum;

var getEnum = GraphQLTypes$Tester.getEnum;

var getNullableEnum = GraphQLTypes$Tester.getNullableEnum;

var postStatus_enumToJs = GraphQLTypes$Tester.postStatus_enumToJs;

var postStatus_enumFromJs = GraphQLTypes$Tester.postStatus_enumFromJs;

var postStatusMap = GraphQLTypes$Tester.postStatusMap;

var Author = GraphQLTypes$Tester.Author;

var Mutation = GraphQLTypes$Tester.Mutation;

var Post = GraphQLTypes$Tester.Post;

var PostMeta = GraphQLTypes$Tester.PostMeta;

var Query = GraphQLTypes$Tester.Query;

var AuthorWhereUniqueInput = GraphQLTypes$Tester.AuthorWhereUniqueInput;

var CreateAuthorInput = GraphQLTypes$Tester.CreateAuthorInput;

var CreateConnectAuthor = GraphQLTypes$Tester.CreateConnectAuthor;

var CreatePostInput = GraphQLTypes$Tester.CreatePostInput;

var RandoInput = GraphQLTypes$Tester.RandoInput;

exports.Graphql_Verify = Graphql_Verify;
exports.Graphql_Missing_Field = Graphql_Missing_Field;
exports.Graphql_Bad_Enum_Value = Graphql_Bad_Enum_Value;
exports.verifyGraphQLType = verifyGraphQLType;
exports.getField = getField;
exports.getNullableField = getNullableField;
exports.getArray = getArray;
exports.getNullableArray = getNullableArray;
exports.makeDecoder = makeDecoder;
exports.makeNullableDecoder = makeNullableDecoder;
exports.decodeInt = decodeInt;
exports.getString = getString;
exports.getNullableString = getNullableString;
exports.getFloat = getFloat;
exports.getNullableFloat = getNullableFloat;
exports.getInt = getInt;
exports.getNullableInt = getNullableInt;
exports.getBool = getBool;
exports.getNullableBool = getNullableBool;
exports.decodeEnum = decodeEnum;
exports.getEnum = getEnum;
exports.getNullableEnum = getNullableEnum;
exports.postStatus_enumToJs = postStatus_enumToJs;
exports.postStatus_enumFromJs = postStatus_enumFromJs;
exports.postStatusMap = postStatusMap;
exports.Author = Author;
exports.Mutation = Mutation;
exports.Post = Post;
exports.PostMeta = PostMeta;
exports.Query = Query;
exports.AuthorWhereUniqueInput = AuthorWhereUniqueInput;
exports.CreateAuthorInput = CreateAuthorInput;
exports.CreateConnectAuthor = CreateConnectAuthor;
exports.CreatePostInput = CreatePostInput;
exports.RandoInput = RandoInput;
exports.MakeQuery = MakeQuery;
exports.Foo = Foo;
exports.Queries = Queries;
exports.Mutations = Mutations;
/* include Not a pure module */
