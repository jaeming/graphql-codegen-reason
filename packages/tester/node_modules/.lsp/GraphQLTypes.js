// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Graphql_Verify = Caml_exceptions.create("GraphQLTypes-Tester.Graphql_Verify");

var Graphql_Missing_Field = Caml_exceptions.create("GraphQLTypes-Tester.Graphql_Missing_Field");

var Graphql_Bad_Enum_Value = Caml_exceptions.create("GraphQLTypes-Tester.Graphql_Bad_Enum_Value");

function verifyGraphQLType(typename, json) {
  var match = Js_json.decodeObject(json);
  if (match !== undefined) {
    var root = Caml_option.valFromOption(match);
    var match$1 = typename === "Query" || typename === "Mutation";
    if (match$1) {
      return root;
    } else {
      var match$2 = Js_dict.get(root, "__typename");
      if (match$2 !== undefined) {
        var match$3 = Js_json.decodeString(Caml_option.valFromOption(match$2));
        var exit = 0;
        if (match$3 !== undefined && match$3 === typename) {
          return root;
        } else {
          exit = 1;
        }
        if (exit === 1) {
          throw [
                Graphql_Verify,
                "Provided object is not " + (String(typename) + " type")
              ];
        }
        
      } else {
        throw [
              Graphql_Verify,
              "Provided object is not a GraphQL object"
            ];
      }
    }
  } else {
    throw [
          Graphql_Verify,
          "Unable to decode " + (String(typename) + " object")
        ];
  }
}

function getField(fieldName, typename, data) {
  var match = Js_dict.get((function (param) {
            return verifyGraphQLType(param, data);
          })(typename), fieldName);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    throw [
          Graphql_Missing_Field,
          "Field " + (String(fieldName) + (" was not present on provided " + (String(typename) + " object. Did you forget to fetch it?")))
        ];
  }
}

function getNullableField(fieldName, typename, data) {
  var match = Js_dict.get((function (param) {
            return verifyGraphQLType(param, data);
          })(typename), fieldName);
  if (match !== undefined) {
    var result = Caml_option.valFromOption(match);
    if (result === null) {
      return undefined;
    } else {
      return Caml_option.some(result);
    }
  } else {
    throw [
          Graphql_Missing_Field,
          "Field " + (String(fieldName) + (" was not present on provided " + (String(typename) + " object. Did you forget to fetch it?")))
        ];
  }
}

function getArray(typename, fieldName, $staropt$star, data) {
  var decoder = $staropt$star !== undefined ? $staropt$star : (function (prim) {
        return prim;
      });
  var arr = getField(fieldName, typename, data);
  return Belt_Array.map(arr, Curry.__1(decoder));
}

function getNullableArray(typename, fieldName, $staropt$star, data) {
  var decoder = $staropt$star !== undefined ? $staropt$star : (function (prim) {
        return prim;
      });
  var arr = getField(fieldName, typename, data);
  if (arr === null) {
    return undefined;
  } else {
    return Belt_Array.map(arr, decoder);
  }
}

function makeDecoder(typename, fieldName, decoder, json) {
  return Belt_Option.getExn(Curry._1(decoder, getField(fieldName, typename, json)));
}

function makeNullableDecoder(typename, fieldName, decoder, json) {
  var value = getField(fieldName, typename, json);
  var match = Curry._1(decoder, value);
  if (match !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(match));
  } else if (value === null) {
    return undefined;
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function decodeInt(json) {
  return Belt_Option.map(Js_json.decodeNumber(json), (function (prim) {
                return prim | 0;
              }));
}

function getString(param) {
  return (function (param$1) {
      return (function (param$2) {
          var param$3 = param$1;
          var param$4 = Js_json.decodeString;
          var param$5 = param$2;
          return makeDecoder(param, param$3, param$4, param$5);
        });
    });
}

function getNullableString(param) {
  return (function (param$1) {
      return (function (param$2) {
          var param$3 = param$1;
          var param$4 = Js_json.decodeString;
          var param$5 = param$2;
          return makeNullableDecoder(param, param$3, param$4, param$5);
        });
    });
}

function getFloat(param) {
  return (function (param$1) {
      return (function (param$2) {
          var param$3 = param$1;
          var param$4 = Js_json.decodeNumber;
          var param$5 = param$2;
          return makeDecoder(param, param$3, param$4, param$5);
        });
    });
}

function getNullableFloat(param) {
  return (function (param$1) {
      return (function (param$2) {
          var param$3 = param$1;
          var param$4 = Js_json.decodeNumber;
          var param$5 = param$2;
          return makeNullableDecoder(param, param$3, param$4, param$5);
        });
    });
}

function getInt(param) {
  return (function (param$1) {
      return (function (param$2) {
          var param$3 = param$1;
          var param$4 = decodeInt;
          var param$5 = param$2;
          return makeDecoder(param, param$3, param$4, param$5);
        });
    });
}

function getNullableInt(param) {
  return (function (param$1) {
      return (function (param$2) {
          var param$3 = param$1;
          var param$4 = decodeInt;
          var param$5 = param$2;
          return makeNullableDecoder(param, param$3, param$4, param$5);
        });
    });
}

function getBool(param) {
  return (function (param$1) {
      return (function (param$2) {
          var param$3 = param$1;
          var param$4 = Js_json.decodeBoolean;
          var param$5 = param$2;
          return makeDecoder(param, param$3, param$4, param$5);
        });
    });
}

function getNullableBool(param) {
  return (function (param$1) {
      return (function (param$2) {
          var param$3 = param$1;
          var param$4 = Js_json.decodeBoolean;
          var param$5 = param$2;
          return makeNullableDecoder(param, param$3, param$4, param$5);
        });
    });
}

function decodeEnum(typename, fieldName, decoder, data) {
  var match = Js_json.decodeString(data);
  if (match !== undefined) {
    var str = match;
    var match$1 = Curry._1(decoder, str);
    if (match$1 !== undefined) {
      return Caml_option.valFromOption(match$1);
    } else {
      throw [
            Graphql_Bad_Enum_Value,
            "Unknown enum value " + (String(str) + (" was provided for field " + (String(fieldName) + (" on " + (String(typename) + "")))))
          ];
    }
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function getEnum(typename, fieldName, decoder, json) {
  var str = Curry._1(getString(typename)(fieldName), json);
  var match = Curry._1(decoder, str);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    throw [
          Graphql_Bad_Enum_Value,
          "Unknown enum value " + (String(str) + (" was provided for field " + (String(fieldName) + (" on " + (String(typename) + "")))))
        ];
  }
}

function getNullableEnum(typename, fieldName, decoder, json) {
  var str = Curry._1(getNullableString(typename)(fieldName), json);
  return Belt_Option.map(str, (function (value) {
                var match = Curry._1(decoder, value);
                if (match !== undefined) {
                  return Caml_option.valFromOption(match);
                } else {
                  throw [
                        Graphql_Bad_Enum_Value,
                        "Unknown enum value " + (String(str) + (" was provided for field " + (String(fieldName) + (" on " + (String(typename) + "")))))
                      ];
                }
              }));
}

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -1003705458,
    "PUBLISHED"
  ],
  /* tuple */[
    -576421631,
    "DRAFT"
  ],
  /* tuple */[
    162284000,
    "PENDING_REVIEW"
  ]
];

function postStatus_enumToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray);
}

function postStatus_enumFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray, param);
}

var postStatusMap = /* record */[
  /* toString */postStatus_enumToJs,
  /* fromString */postStatus_enumFromJs
];

var typename = "Author";

var firstName = getString(typename)("firstName");

var lastName = getNullableString(typename)("lastName");

var age = getInt(typename)("age");

function posts(eta) {
  var param = undefined;
  var param$1 = eta;
  return getArray(typename, "posts", param, param$1);
}

function postMetas(eta) {
  var param = undefined;
  var param$1 = eta;
  return getNullableArray(typename, "postMetas", param, param$1);
}

function nullablePosts(eta) {
  var param = undefined;
  var param$1 = eta;
  return getArray(typename, "nullablePosts", param, param$1);
}

var numPosts = getNullableInt(typename)("numPosts");

var height = getFloat(typename)("height");

var weight = getNullableFloat(typename)("weight");

var isActive = getBool(typename)("isActive");

var hasLoggedIn = getNullableBool(typename)("hasLoggedIn");

var Author = /* module */[
  /* typename */typename,
  /* firstName */firstName,
  /* lastName */lastName,
  /* age */age,
  /* posts */posts,
  /* postMetas */postMetas,
  /* nullablePosts */nullablePosts,
  /* numPosts */numPosts,
  /* height */height,
  /* weight */weight,
  /* isActive */isActive,
  /* hasLoggedIn */hasLoggedIn
];

var typename$1 = "Mutation";

function createPost(param) {
  return getField("createPost", typename$1, param);
}

function createFullPost(param) {
  return getField("createFullPost", typename$1, param);
}

function maybeCreatePost(param) {
  return getNullableField("maybeCreatePost", typename$1, param);
}

var Mutation = /* module */[
  /* typename */typename$1,
  /* createPost */createPost,
  /* createFullPost */createFullPost,
  /* maybeCreatePost */maybeCreatePost
];

var typename$2 = "Post";

var content = getString(typename$2)("content");

var title = getNullableString(typename$2)("title");

function status(param) {
  return getEnum(typename$2, "status", postStatus_enumFromJs, param);
}

var partial_arg = (function (param) {
    return decodeEnum(typename$2, "statuses", postStatus_enumFromJs, param);
  });

function statuses(param) {
  return getArray(typename$2, "statuses", partial_arg, param);
}

function nullableStatus(param) {
  return getNullableEnum(typename$2, "nullableStatus", postStatus_enumFromJs, param);
}

function author(param) {
  return getField("author", typename$2, param);
}

function meta(param) {
  return getNullableField("meta", typename$2, param);
}

var type_ = getNullableString(typename$2)("type");

var Post = /* module */[
  /* typename */typename$2,
  /* content */content,
  /* title */title,
  /* status */status,
  /* statuses */statuses,
  /* nullableStatus */nullableStatus,
  /* author */author,
  /* meta */meta,
  /* type_ */type_
];

var typename$3 = "PostMeta";

var published = getString(typename$3)("published");

var PostMeta = /* module */[
  /* typename */typename$3,
  /* published */published
];

var typename$4 = "Query";

function posts$1(eta) {
  var param = undefined;
  var param$1 = eta;
  return getArray(typename$4, "posts", param, param$1);
}

function authors(eta) {
  var param = undefined;
  var param$1 = eta;
  return getArray(typename$4, "authors", param, param$1);
}

var Query = /* module */[
  /* typename */typename$4,
  /* posts */posts$1,
  /* authors */authors
];

function make(firstName, param) {
  return {
          firstName: firstName
        };
}

var AuthorWhereUniqueInput = /* module */[/* make */make];

function make$1(firstName, lastName, param) {
  return {
          firstName: firstName,
          lastName: Js_null_undefined.fromOption(lastName)
        };
}

var CreateAuthorInput = /* module */[/* make */make$1];

function make$2(connect, create, param) {
  return {
          connect: Js_null_undefined.fromOption(connect),
          create: Js_null_undefined.fromOption(create)
        };
}

var CreateConnectAuthor = /* module */[/* make */make$2];

function make$3(title, content, status, maybeStatus, statuses, strings, author, postTime, param) {
  return {
          title: Js_null_undefined.fromOption(title),
          content: content,
          status: postStatus_enumToJs(status),
          maybeStatus: Js_null_undefined.fromOption(Belt_Option.map(maybeStatus, postStatus_enumToJs)),
          statuses: Js_null_undefined.fromOption(Belt_Option.map(statuses, (function (param) {
                      return $$Array.map(postStatus_enumToJs, param);
                    }))),
          strings: Js_null_undefined.fromOption(strings),
          author: author,
          postTime: postTime
        };
}

var CreatePostInput = /* module */[/* make */make$3];

function make$4(thisIs, notUsed, byAnything, param) {
  return {
          thisIs: Js_null_undefined.fromOption(thisIs),
          notUsed: Js_null_undefined.fromOption(notUsed),
          byAnything: Js_null_undefined.fromOption(byAnything)
        };
}

var RandoInput = /* module */[/* make */make$4];

exports.Graphql_Verify = Graphql_Verify;
exports.Graphql_Missing_Field = Graphql_Missing_Field;
exports.Graphql_Bad_Enum_Value = Graphql_Bad_Enum_Value;
exports.verifyGraphQLType = verifyGraphQLType;
exports.getField = getField;
exports.getNullableField = getNullableField;
exports.getArray = getArray;
exports.getNullableArray = getNullableArray;
exports.makeDecoder = makeDecoder;
exports.makeNullableDecoder = makeNullableDecoder;
exports.decodeInt = decodeInt;
exports.getString = getString;
exports.getNullableString = getNullableString;
exports.getFloat = getFloat;
exports.getNullableFloat = getNullableFloat;
exports.getInt = getInt;
exports.getNullableInt = getNullableInt;
exports.getBool = getBool;
exports.getNullableBool = getNullableBool;
exports.decodeEnum = decodeEnum;
exports.getEnum = getEnum;
exports.getNullableEnum = getNullableEnum;
exports.postStatus_enumToJs = postStatus_enumToJs;
exports.postStatus_enumFromJs = postStatus_enumFromJs;
exports.postStatusMap = postStatusMap;
exports.Author = Author;
exports.Mutation = Mutation;
exports.Post = Post;
exports.PostMeta = PostMeta;
exports.Query = Query;
exports.AuthorWhereUniqueInput = AuthorWhereUniqueInput;
exports.CreateAuthorInput = CreateAuthorInput;
exports.CreateConnectAuthor = CreateConnectAuthor;
exports.CreatePostInput = CreatePostInput;
exports.RandoInput = RandoInput;
/* firstName Not a pure module */
