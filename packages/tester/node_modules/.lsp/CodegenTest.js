// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var GraphQLTypes$Tester = require("tester/generated/GraphQLTypes.bs.js");

Jest.describe("parsing JSON", (function (param) {
        Jest.describe("Scalars", (function (param) {
                Jest.describe("String", (function (param) {
                        Jest.test("it can parse scalar strings", (function (param) {
                                var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                 {\"authors\": [{\"__typename\": \"Author\", \"firstName\": \"Fred\"}]}\n               "));
                                return Jest.Expect[/* toBe */2]("Fred", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Author[/* firstName */1], Caml_array.caml_array_get(authors, 0))));
                              }));
                        Jest.test("it can parse nullable scalar strings that are non-null", (function (param) {
                                var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                     {\"authors\": [{\"__typename\": \"Author\", \"lastName\": \"Fredrickson\"}]}\n                   "));
                                return Jest.Expect[/* toBe */2]("Fredrickson", Jest.Expect[/* expect */0](Belt_Option.getWithDefault(Curry._1(GraphQLTypes$Tester.Author[/* lastName */2], Caml_array.caml_array_get(authors, 0)), "null")));
                              }));
                        return Jest.test("it can parse nullable scalar strings that are null", (function (param) {
                                      var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                       {\"authors\": [{\"__typename\": \"Author\", \"lastName\": null}]}\n                     "));
                                      return Jest.Expect[/* toBe */2]("null", Jest.Expect[/* expect */0](Belt_Option.getWithDefault(Curry._1(GraphQLTypes$Tester.Author[/* lastName */2], Caml_array.caml_array_get(authors, 0)), "null")));
                                    }));
                      }));
                Jest.describe("Int", (function (param) {
                        Jest.test("it can parse scalar ints", (function (param) {
                                var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                   {\"authors\": [{\"__typename\": \"Author\", \"age\": 37}]}\n                 "));
                                return Jest.Expect[/* toBe */2](37, Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Author[/* age */3], Caml_array.caml_array_get(authors, 0))));
                              }));
                        Jest.test("it can parse nullable scalar ints that are non-null", (function (param) {
                                var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                     {\"authors\": [{\"__typename\": \"Author\", \"numPosts\": 12}]}\n                   "));
                                return Jest.Expect[/* toBe */2](12, Jest.Expect[/* expect */0](Belt_Option.getWithDefault(Curry._1(GraphQLTypes$Tester.Author[/* numPosts */7], Caml_array.caml_array_get(authors, 0)), 0)));
                              }));
                        return Jest.test("it can parse nullable scalar ints that are non-null", (function (param) {
                                      var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                       {\"authors\": [{\"__typename\": \"Author\", \"numPosts\": null}]}\n                     "));
                                      return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](Belt_Option.getWithDefault(Curry._1(GraphQLTypes$Tester.Author[/* numPosts */7], Caml_array.caml_array_get(authors, 0)), 0)));
                                    }));
                      }));
                Jest.describe("Float", (function (param) {
                        Jest.test("it can parse scalar floats", (function (param) {
                                var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                           {\"authors\": [{\"__typename\": \"Author\", \"height\": 34.3}]}\n                         "));
                                return Jest.Expect[/* toBe */2](34.3, Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Author[/* height */8], Caml_array.caml_array_get(authors, 0))));
                              }));
                        Jest.test("it can parse nullable scalar floats that are non-null", (function (param) {
                                var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                             {\"authors\": [{\"__typename\": \"Author\", \"weight\": 100.3}]}\n                           "));
                                return Jest.Expect[/* toBe */2](100.3, Jest.Expect[/* expect */0](Belt_Option.getWithDefault(Curry._1(GraphQLTypes$Tester.Author[/* weight */9], Caml_array.caml_array_get(authors, 0)), 0)));
                              }));
                        return Jest.test("it can parse nullable scalar floats that are non-null", (function (param) {
                                      var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                               {\"authors\": [{\"__typename\": \"Author\", \"weight\": null}]}\n                             "));
                                      return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](Belt_Option.getWithDefault(Curry._1(GraphQLTypes$Tester.Author[/* weight */9], Caml_array.caml_array_get(authors, 0)), 0)));
                                    }));
                      }));
                return Jest.describe("Boolean", (function (param) {
                              Jest.test("it can parse scalar booleans", (function (param) {
                                      var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                                 {\"authors\": [{\"__typename\": \"Author\", \"isActive\": true}]}\n                               "));
                                      return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Author[/* isActive */10], Caml_array.caml_array_get(authors, 0))));
                                    }));
                              Jest.test("it can parse nullable scalar booleans that are non-null", (function (param) {
                                      var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                                   {\"authors\": [{\"__typename\": \"Author\", \"hasLoggedIn\": false}]}\n                                 "));
                                      return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Belt_Option.getWithDefault(Curry._1(GraphQLTypes$Tester.Author[/* hasLoggedIn */11], Caml_array.caml_array_get(authors, 0)), true)));
                                    }));
                              return Jest.test("it can parse nullable scalar booleans that are non-null", (function (param) {
                                            var authors = GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                                     {\"authors\": [{\"__typename\": \"Author\", \"hasLoggedIn\": null}]}\n                                   "));
                                            return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Belt_Option.getWithDefault(Curry._1(GraphQLTypes$Tester.Author[/* hasLoggedIn */11], Caml_array.caml_array_get(authors, 0)), false)));
                                          }));
                            }));
              }));
        Jest.describe("Nested types", (function (param) {
                Jest.test("can access a nested type", (function (param) {
                        var posts = GraphQLTypes$Tester.Query[/* posts */1](JSON.parse("\n                       {\"posts\": [{\"__typename\": \"Post\", \"author\": {\n                         \"__typename\": \"Author\", \"firstName\": \"Fred\"\n                       }}]}\n                     "));
                        return Jest.Expect[/* toBe */2]("Fred", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Author[/* firstName */1], GraphQLTypes$Tester.Post[/* author */6](Caml_array.caml_array_get(posts, 0)))));
                      }));
                Jest.test("can access a nested nullable type that isn't null", (function (param) {
                        var posts = GraphQLTypes$Tester.Query[/* posts */1](JSON.parse("\n                           {\"posts\": [{\"__typename\": \"Post\", \"meta\": {\n                             \"__typename\": \"PostMeta\", \"published\": \"Friday\"\n                           }}]}\n                         "));
                        return Jest.Expect[/* toBe */2]("Friday", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.PostMeta[/* published */1], Belt_Option.getExn(GraphQLTypes$Tester.Post[/* meta */7](Caml_array.caml_array_get(posts, 0))))));
                      }));
                Jest.test("can access a nested nullable type that is null", (function (param) {
                        var posts = GraphQLTypes$Tester.Query[/* posts */1](JSON.parse("\n                               {\"posts\": [{\"__typename\": \"Post\", \"meta\": null}]}\n                             "));
                        return Jest.Expect[/* toBe */2](undefined, Jest.Expect[/* expect */0](GraphQLTypes$Tester.Post[/* meta */7](Caml_array.caml_array_get(posts, 0))));
                      }));
                return Jest.describe("Arrays of nested types", (function (param) {
                              Jest.test("can access an array of nested types", (function (param) {
                                      var author = Caml_array.caml_array_get(GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n          {\"authors\": [{\"__typename\": \"Author\", \"posts\": [{\"__typename\": \"Post\", \"content\": \"hey\"}]}]}\n        ")), 0);
                                      return Jest.Expect[/* toBe */2]("hey", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Post[/* content */1], Caml_array.caml_array_get(GraphQLTypes$Tester.Author[/* posts */4](author), 0))));
                                    }));
                              Jest.test("can access a nullable array of nested types", (function (param) {
                                      var author = Caml_array.caml_array_get(GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n                  {\"authors\": [{\"__typename\": \"Author\", \"postMetas\": [{\"__typename\": \"PostMeta\", \"published\": \"hey\"}]}]}\n                ")), 0);
                                      return Jest.Expect[/* toBe */2]("hey", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.PostMeta[/* published */1], Caml_array.caml_array_get(Belt_Option.getExn(GraphQLTypes$Tester.Author[/* postMetas */5](author)), 0))));
                                    }));
                              return Jest.test("can access an array of nested nullable types", (function (param) {
                                            var author = Caml_array.caml_array_get(GraphQLTypes$Tester.Query[/* authors */2](JSON.parse("\n          {\"authors\": [{\"__typename\": \"Author\", \"nullablePosts\": [{\"__typename\": \"Post\", \"content\": \"hey\"}]}]}\n        ")), 0);
                                            return Jest.Expect[/* toBe */2]("hey", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Post[/* content */1], Belt_Option.getExn(Caml_array.caml_array_get(GraphQLTypes$Tester.Author[/* nullablePosts */6](author), 0)))));
                                          }));
                            }));
              }));
        Jest.describe("Enums", (function (param) {
                Jest.test("can parse enum values", (function (param) {
                        var posts = GraphQLTypes$Tester.Query[/* posts */1](JSON.parse("\n        {\"posts\": [{\"__typename\": \"Post\", \"status\": \"PUBLISHED\"}]}\n      "));
                        return Jest.Expect[/* toEqual */12](/* PUBLISHED */-1003705458, Jest.Expect[/* expect */0](GraphQLTypes$Tester.Post[/* status */3](Caml_array.caml_array_get(posts, 0))));
                      }));
                Jest.test("can parse nullable enum values that aren't null", (function (param) {
                        var posts = GraphQLTypes$Tester.Query[/* posts */1](JSON.parse("\n        {\"posts\": [{\"__typename\": \"Post\", \"nullableStatus\": \"PUBLISHED\"}]}\n      "));
                        return Jest.Expect[/* toEqual */12](/* PUBLISHED */-1003705458, Jest.Expect[/* expect */0](GraphQLTypes$Tester.Post[/* nullableStatus */5](Caml_array.caml_array_get(posts, 0))));
                      }));
                Jest.test("can parse nullable enum values that are null", (function (param) {
                        var posts = GraphQLTypes$Tester.Query[/* posts */1](JSON.parse("\n        {\"posts\": [{\"__typename\": \"Post\", \"nullableStatus\": null}]}\n      "));
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](GraphQLTypes$Tester.Post[/* nullableStatus */5](Caml_array.caml_array_get(posts, 0))));
                      }));
                Jest.test("can parse an array of enums", (function (param) {
                        var posts = GraphQLTypes$Tester.Query[/* posts */1](JSON.parse("\n        {\"posts\": [{\"__typename\": \"Post\", \"statuses\": [\"PUBLISHED\"]}]}\n      "));
                        return Jest.Expect[/* toEqual */12](/* PUBLISHED */-1003705458, Jest.Expect[/* expect */0](Caml_array.caml_array_get(Curry._1(GraphQLTypes$Tester.Post[/* statuses */4], Caml_array.caml_array_get(posts, 0)), 0)));
                      }));
                return Jest.describe("Enum maps", (function (param) {
                              Jest.test("can encode a string with the map", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("PUBLISHED", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.postStatusMap[/* toString */0], /* PUBLISHED */-1003705458)));
                                    }));
                              return Jest.test("can decode a string with the map", (function (param) {
                                            return Jest.Expect[/* toEqual */12](/* PUBLISHED */-1003705458, Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.postStatusMap[/* fromString */1], "PUBLISHED")));
                                          }));
                            }));
              }));
        Jest.describe("naming collisions", (function (param) {
                return Jest.test("handles fields named 'type'", (function (param) {
                              var posts = GraphQLTypes$Tester.Query[/* posts */1](JSON.parse("\n        {\"posts\": [{\"__typename\": \"Post\", \"type\": \"foo\"}]}\n      "));
                              return Jest.Expect[/* toEqual */12]("foo", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Post[/* type_ */8], Caml_array.caml_array_get(posts, 0))));
                            }));
              }));
        return Jest.describe("decoding mutation types", (function (param) {
                      return Jest.test("handles decoding the Mutation type", (function (param) {
                                    var newPost = GraphQLTypes$Tester.Mutation[/* createPost */1](JSON.parse("\n                {\"createPost\": {\"__typename\": \"Post\", \"title\": \"hey\"}}\n              "));
                                    return Jest.Expect[/* toEqual */12]("hey", Jest.Expect[/* expect */0](Curry._1(GraphQLTypes$Tester.Post[/* title */2], newPost)));
                                  }));
                    }));
      }));

/*  Not a pure module */
